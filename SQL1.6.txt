/*
Таблица "Командировки", запросы на выборку

Содержание урока
В этом уроке на каждом шаге нужно реализовать запросы на выборку для таблицы, 
в которой представлена информация о командировках сотрудников некоторой организации:

Задание
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», 
в отсортированном по убыванию даты последнего дня командировки виде. 
В результат включить столбцы name, city, per_diem, date_first, date_last.
*/

SELECT name,
	city,
	per_diem, 
	date_first, 
	date_last
FROM 
	trip
WHERE 
	name LIKE '%а %'
ORDER BY 
	date_last DESC;

/*
Задание
Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.

Связанные шаги
выборка столбцов;
уникальные записи;
условие отбора;
сортировка.
*/

SELECT DISTINCT 
				name
FROM 
	trip
WHERE 
	city = 'Москва'
ORDER by 
	name ASC;

/*
Задание
Для каждого города посчитать, сколько раз сотрудники в нем были.  
Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.

Связанные шаги
выборка столбцов и их именование;
вычисления для сгруппированных данных;
сортировка.
*/

SELECT 
	city,
    COUNT(city) AS Количество
FROM 
	trip
GROUP BY 
	city
ORDER BY 
	city
;

/*
Оператор LIMIT
Для ограничения вывода записей в SQL используется оператор LIMIT , после которого указывается количество строк.  
Результирующая таблица будет иметь количество строк не более указанного после LIMIT. LIMIT размещается после раздела ORDER BY.

Как правило, этот оператор используется, чтобы отобрать заданное количество отсортированных строк результата запроса. 

Пример

Вывести информацию о первой  командировке из таблицы trip. "Первой" считать командировку с самой ранней датой начала.

Запрос:
*/
SELECT *
FROM trip
ORDER BY  date_first
LIMIT 1;
/*
Важно. Оператор LIMIT нужно использовать очень осторожно. 
Например, если бы в таблице trip было несколько командировок с одинаковой датой начала, этот запрос работал бы НЕВЕРНО. 
Это связано с тем, что заранее не известно точное значение таких командировок.

Задание
Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.

Связанные шаги
выборка столбцов и их именование;
вычисления для сгруппированных данных;
сортировка.
*/

SELECT 
	city,
    COUNT(city) AS Количество
FROM 
	trip
GROUP BY 
	city
ORDER BY 
	Количество DESC
LIMIT 
	2;

/*
Задание
Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  
длительность командировки в днях, при этом первый и последний день относится к периоду командировки). 
Последний столбец назвать Длительность. 
Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).

Немного теории
Для вычитания двух дат используется функция DATEDIFF(дата_1, дата_2), результатом которой является количество дней между дата_1 и дата_2. 
Например,

DATEDIFF('2020-04-01', '2020-03-28')=4

DATEDIFF('2020-05-09','2020-05-01')=8

DATEDIFF(date_last, date_first)

Пояснение
Увеличьте разницу на 1, чтобы включить первый день командировки.

Связанные шаги
выборка столбцов и их именование;
условие отбора (шаг, шаг);
сортировка.
*/

SELECT 
	name,
    city,
    DATEDIFF(date_last,date_first)+1 AS Длительность
FROM 
	trip
WHERE 
	city NOT IN ('Москва', 'Санкт-петербург')
ORDER BY 
	3 DESC, 
	city DESC; 
	/*Если две и больше сортировок, то сперва идёт 1-я, а затем в скхожих значениях 1-й сортировки включается вторая т.д.
	| Федорова А.Ю. | Томск       | 7       |
	| Баранов П.Е.  | Воронеж     | 7 		|
	тут 1-я сортировка по количеству, но значения равны и идёт 2-я сортировка по городам.
	Т.е. приоритет сортировки идёт по порядку их записей
	*/

/*
Задание
Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. 
В результат включить столбцы name, city, date_first, date_last.

Пояснение
Используйте вложенный запрос, чтобы найти длительность самой короткой командировки. 

Связанные шаги
выборка столбцов;
вложенный запрос в WHERE;
вычитание дат;
групповые вычисления по всей таблице;
групповые функции.	
*/

SELECT
    name,
    city,
    date_first,
    date_last
FROM 
    trip
WHERE 
    DATEDIFF(date_last, date_first) <= (SELECT MIN(DATEDIFF(date_last, date_first))FROM trip);
	
/*
Задание
Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). 
В результат включить столбцы name, city, date_first, date_last. 
Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .

Немного теории

Для того, чтобы выделить номер месяца из даты используется функция MONTH(дата).

Например, MONTH('2020-04-12') = 4.

Если определяется месяц для  значений столбца date_first, то используется запись MONTH(date_first)

Связанные шаги
выборка столбцов;
условие отбора;
сортировка.
*/

SELECT
    name,
    city,
    date_first,
    date_last
FROM 
	trip
WHERE 
	MONTH(date_first) = MONTH(date_last)
ORDER BY 
	city ASC, name ASC;
	
/*
Задание
Вывести название месяца и количество командировок для каждого месяца.
Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. 
Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. 
Название столбцов – Месяц и Количество.

Немного теории

Для того, чтобы выделить название месяца из даты используется функция MONTHNAME(дата), которая возвращает название месяца на английском языке для указанной даты. Например, MONTHNAME('2020-04-12')='April'.
Если группировка осуществляется по вычисляемому столбцу (в данном случае «вычисляется» название месяца), то после GROUP BYможно указать как вычисляемое выражение, так и имя столбца, заданное с помощью AS. Важно отметить, что последний вариант (указать имя столбца)  нарушает стандарт по порядку выполнения запросов, но иногда может встречаться на реальных платформах.

Связанные шаги
выборка столбцов и их именование;
вычисления для сгруппированных данных;
сортировка.
*/

SELECT
    MONTHNAME(date_first) AS Месяц,
    COUNT(name) AS Количество /*можно использовать "*" */
FROM 
	trip
GROUP BY 
	1
ORDER BY 
	2 DESC, 1 ASC;
	
/*
Задание
Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, 
первый день которых пришелся на февраль или март 2020 года. 
Значение суточных для каждой командировки занесено в столбец per_diem. 
Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. 
Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, 
а затем по убыванию суммы суточных.

Пояснение
1. В SQL есть функции, которые позволяют выделить часть даты: день(DAY()), месяц (MONTH()), год(YEAR()) . Например:

DAY('2020-02-01') = 1
MONTH('2020-02-01') = 2
YEAR('2020-02-01') = 2020

2. Количество дней командировки вычисляется как разница между датами последнего и первого дня командировки плюс 1.

Связанные шаги
выборка столбцов и их именование;
вычисления в SELECT;
вычитание дат;
выделение номера месяца из даты;
условие отбора;
сортировка.
*/

SELECT
    name,
    city,
    date_first,
    per_diem * (DATEDIFF(date_last, date_first)+1)  AS Сумма
FROM 
    trip
WHERE 
    MONTH(date_first) IN (2, 3)
    AND YEAR(date_first) = 2020
ORDER BY 
    1 ASC, 
    4 DESC;
	
/*
Задание
Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, 
которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. 
Последний столбец назвать Сумма.

Только для этого задания изменена строка таблицы trip:

4|	Ильиных Г.Р.|	Владивосток|	450|	2020-01-12|		2020-03-02|

Связанные шаги
выборка столбцов;
вычисления в SELECT;
вычисления над сгруппированными данными;
условие отбора в запросах группировки;
вложенные запросы;
сортировка.
*/

SELECT 
    name,
    SUM((DATEDIFF(date_last, date_first) + 1) * per_diem) AS Сумма
FROM 
    trip
GROUP BY 
    name
HAVING 
    COUNT(name) > 3
ORDER BY 
    2 DESC;