/*
1.7 Таблица Нарушения ПДД, запросы корректировки

В этом уроке на каждом шаге используется таблица,  
в которой представлена информация о начисленных водителям штрафах за нарушения правил дорожного движения (ПДД)

Структура и наполнение таблиц
В таблице fine  представлена информация о начисленных водителям штрафах за нарушения правил дорожного движения (ПДД) (фамилия водителя, номер машины, описание нарушения, сумма штрафа, дата совершения нарушения и дата оплаты штрафа):

Для MySQL (номера на латинице):
*/
CREATE TABLE fine
(
    fine_id        INT PRIMARY KEY,
    name           VARCHAR(30),
    number_plate   VARCHAR(6),
    violation      VARCHAR(50),
    sum_fine       DECIMAL(8, 2),
    date_violation DATE,
    date_payment   DATE
);

INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
       ('Яковлев Г.Р.', 'T330TT', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL),
       ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
       ('Яковлев Г.Р.', 'T330TT', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
       ('Яковлев Г.Р.', 'M701AA', 'Превышение скорости(от 20 до 40)', NULL, '2020-01-12', NULL),
       ('Колесов С.П.', 'K892AX', 'Превышение скорости(от 20 до 40)', NULL, '2020-02-01', NULL);

CREATE TABLE traffic_violation
(
    violation_id INT PRIMARY KEY AUTO_INCREMENT,
    violation    VARCHAR(50),
    sum_fine     DECIMAL(8, 2)
);

INSERT INTO traffic_violation (violation, sum_fine)
VALUES ('Превышение скорости(от 20 до 40)', 500),
       ('Превышение скорости(от 40 до 60)', 1000),
       ('Проезд на запрещающий сигнал', 1000);

/*
Для Postgresql
*/

CREATE TABLE fine
(
    fine_id        INT PRIMARY KEY GENERATED ALWAYS AS identity,
    name           TEXT,
    number_plate   TEXT,
    violation      TEXT,
    sum_fine       DECIMAL(8, 2),
    date_violation DATE,
    date_payment   DATE
);

INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14 ', NULL),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
       ('Яковлев Г.Р.', 'T330TT', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL),
       ('Баранов П.Е.', 'P523BT', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
       ('Абрамова К.А.', 'О111AB', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
       ('Яковлев Г.Р.', 'T330TT', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
       ('Яковлев Г.Р.', 'M701AA', 'Превышение скорости(от 20 до 40)', NULL, '2020-01-12', NULL),
       ('Колесов С.П.', 'K892AX', 'Превышение скорости(от 20 до 40)', NULL, '2020-02-01', NULL);

DROP TABLE IF EXISTS traffic_violation CASCADE;

CREATE TABLE traffic_violation
(
    violation_id INT PRIMARY KEY GENERATED ALWAYS AS identity,
    violation    TEXT,
    sum_fine     DECIMAL(8, 2)
);

INSERT INTO traffic_violation (violation, sum_fine)
VALUES ('Превышение скорости(от 20 до 40)', 500),
       ('Превышение скорости(от 40 до 60)', 1000),
       ('Проезд на запрещающий сигнал', 1000);

/*
Задание
Создать таблицу fine следующей структуры:

Поле			Описание
fine_id			ключевой столбец целого типа с автоматическим увеличением значения ключа на 1
name			строка длиной 30
number_plate	строка длиной 6
violation		строка длиной 50
sum_fine		вещественное число, максимальная длина 8, количество знаков после запятой 2
date_violation	дата
date_payment	дата
*/

INSERT INTO fine(
    name,
    number_plate,
    violation,
    sum_fine,
    date_violation,
    date_payment
	)
VALUES
    ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
    ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
    ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL);
	
/*
Использование временного имени таблицы (алиаса)

Чтобы не писать название таблицы каждый раз, удобно использовать алиасы.

Алиас, это псевдоним, который мы присваивали столбцам после ключевого слова AS(шаг).  
Алиасы так же можно использовать и для таблиц. Это становится актуальным, при увеличении числа используемых таблиц, их иногда может быть и 5 и 10 и более. Псевдонимы помогают сделать запрос чище и читабельнее.

Для присваивания псевдонима существует 2 варианта: 

с использованием ключевого слова AS 
FROM fine AS f, traffic_violation AS tv
а так же и без него
FROM fine f, traffic_violation tv
После присвоения таблице алиаса, он используется во всех разделах запроса, в котором алиас задан. Например:

WHERE f.violation = tv.violation
Пример

Для тех, кто уже оплатил штраф, вывести информацию о том, изменялась ли стандартная сумма штрафа.

Запрос:
*/
SELECT  f.name, f.number_plate, f.violation, 
   if(
    f.sum_fine = tv.sum_fine, "Стандартная сумма штрафа", 
    if(
      f.sum_fine < tv.sum_fine, "Уменьшенная сумма штрафа", "Увеличенная сумма штрафа"
    )
  ) AS description               
FROM  fine f, traffic_violation tv
WHERE tv.violation = f.violation and f.sum_fine IS NOT Null;
/*
Задание
Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.

Таблица traffic_violationсоздана и заполнена.

Важно! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL.

Пояснение
1. После ключевого слова UPDATE кроме обновляемой таблицыfine укажите таблицу traffic_violation, для того 
чтобы запрос видел таблицы источники.  Сначала перечисляем все источники, потом выполняем необходимые действия.

2.Обновляйте только те записи таблицы fine, у которых значение столбца violation совпадает со значением 
соответствующего столбца таблицы traffic_violation, а также значение столбца sum_fine пусто.

Связанные шаги
обновление данных (шаг, шаг);
условие отбора.
*/

UPDATE 
	fine AS f, 
	traffic_violation AS tv
SET 
	f.sum_fine = tv.sum_fine
WHERE 
	f.sum_fine IS NULL 
	AND f.violation = tv.violation;

SELECT  
	*
FROM 
	fine;
	
/*
Группировка данных по нескольким столбцам
В разделе GROUP BY можно указывать несколько столбцов, разделяя их запятыми. 
Тогда к одной группе будут относиться записи, у которых значения столбцов, входящих в группу, равны. 
Рассмотрим группировку по нескольким столбцам на примере следующего запроса:
*/
SELECT name, number_plate, violation, count(*)
FROM fine
GROUP BY name, number_plate, violation;
/*
1. Сначала записи таблицы  fine разделяются на группы.
В каждую группу включаются строки, у которых равны значения в столбцах name, number_plate и violation  соответственно. 
Получается 6 групп. 

2. Затем вычисляется функция count(*), которая определяет количество записей в каждой группе. 
Получается, что к первым двум группам относятся по две записи, ко всем остальным - по одной.

Важно! В разделе GROUP BY нужно перечислять все НЕАГРЕГИРОВАННЫЕ столбцы (к которым не применяются групповые функции) из SELECT.

Задание
Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.

Пояснение
Под увеличение  штрафа в два раза подходит водитель «Абрамова К.А.», который на машине с государственным номером «О111АВ» совершил повторное нарушение «Проезд на запрещающий сигнал», а также водитель  «Баранов П.Е.» , который на машине с номером  «Р523ВТ» дважды совершил нарушение «Превышение скорости(от 40 до 60) ».

Связанные шаги
выборка столбцов;
условие отбора в запросах группировки ;
сортировка.
*/

SELECT 
	name, number_plate, violation
FROM 
	fine
GROUP BY /*подробнее о GROUP BY читать https://stepik.org/lesson/305762/step/5?thread=solutions&unit=287773*/
	name, number_plate, violation
HAVING 
	COUNT(name) >= 2
ORDER BY 
	name, 
	number_plate,
	violation ASC;

/*
Задание
В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 
*/
/*
Пояснение
Для всех нарушений, по которым штраф еще не оплачен, (тех, у которых date_payment имеет пустое значение Null), 
необходимо проверить, является ли данное нарушение для водителя и машины повторным, если да –  увеличить штраф в два раза.
Если водитель совершил нарушение на другой машине, ему увеличивать штраф не нужно.
Если несколько повторных нарушений не оплачены, то штраф увеличить для всех.
Этот запрос реализован на предыдущем шаге.
При реализации можно использовать вложенный запрос как отдельную таблицу, записанную после ключевого слова UPDATE, 
при этом вложенному запросу необходимо присвоить имя, например query_in:

UPDATE fine, 
    (
     SELECT ...
    ) query_in
SET ...
WHERE указать, что совпадают нарушение, фамилия водителя и номер машины в таблицах fine и 
вложенном запросе query_in соответственно, а также дата оплаты в таблице fine пуста
Другим способом решения является использование двух запросов: 
сначала создать временную таблицу, например query_in, в которую включить информацию о тех штрафах, 
сумму которых нужно увеличить в два раза, а затем уже обновлять информацию в таблице fine:

CREATE TABLE query_in ...;

UPDATE fine, query_in
SET ...
WHERE ...;
После ключевого слова WHERE  указывается условие, при котором нужно обновлять данные. 
В нашем случае  данные обновляются, если и фамилия, и государственный номер, и нарушение совпадают в таблице fine и 
в результирующей таблице запроса query_in. Например, для связи по фамилии используется запись fine.name = query_in.name. 
Также в условии нужно учесть, что данные обновляются только для тех записей, у которых в столбце date_payment пусто.
*/
/*
Важно! Если в запросе используется несколько таблиц или запросов, включающих одинаковые поля, то применяется полное имя столбца, включающего название таблицы через символ «.». Например,  fine.name  и  query_in.name.

Связанные шаги
обновление данных (шаг, шаг, шаг);
условие отбора.
*/

UPDATE 
    fine,(
        SELECT 
	        name, number_plate, violation
        FROM 
	        fine
        GROUP BY
            name, number_plate, violation
        HAVING 
            COUNT(3) >= 2
        ORDER BY 
            name, 
	        number_plate,
	        violation ASC) AS fine2
SET 
    sum_fine = IF(date_payment IS NULL, sum_fine * 2, sum_fine)
WHERE 
    fine.name = fine2.name;
    
SELECT 
	name, number_plate, violation, sum_fine, date_violation, date_payment
FROM 
	fine
;
