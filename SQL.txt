
/*Математические функции

ROUND(x, k) — округляет значение x до k знаков после запятой: ROUND(4.361)=4
если k не указано – x округляется до целого: ROUND(5.86592,1)=5.9

Задание:
В конце года цену всех книг на складе пересчитывают – снижают ее на 30%.
Написать SQL запрос, который из таблицы book выбирает названия, авторов, 
количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, 
цену округлить до 2-х знаков после запятой.
*/

SELECT title, author, amount,
    ROUND (price-(price/100)*30,2) AS new_price
FROM book;

/*Логические функции

В SQL реализована возможность заносить в поле значение в зависимости от условия.
Для этого используется функция IF: 
	IF(логическое_выражение, выражение_1, выражение_2)
Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1, в противном случае –  значение выражения_2. 
Все три параметра IF() являются обязательными.
Допускается использование вложенных функций, вместо выражения_1 или выражения_2 может стоять новая функция IF.

Задание
При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина.
Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%.
Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.

последний price говорит "если не Булгаков и не Есенин, то все остальные цены остаются без изменений
*/

SELECT author, title,
    ROUND (IF (author = "Булгаков М.А.", price * 1.1, IF (author = "Есенин С.А.", price * 1.05, price)), 2) AS new_price
FROM book;

/*Выборка данных по условию

С помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те, которые отвечают некоторому условию. 
Для этого после указания таблицы, откуда выбираются данные, задается ключевое слово WHERE и логическое выражение, 
от результата которого зависит будет ли включена строка в выборку или нет. 
Если условие – истина, то строка(запись)  включается в выборку, если ложь – нет.

Логическое выражение может включать операторы сравнения:
	(равно «=», не равно «<>», больше «>», меньше «<», больше или равно«>=», меньше или равно «<=») и выражения, допустимые в SQL.
	
Задание:
Вывести автора, название  и цены тех книг, количество которых меньше 10.
*/

SELECT author, title, price
FROM book
WHERE amount < 10;

/*
Выборка данных, логические операции

Логическое выражение после ключевого слова WHERE кроме операторов сравнения и выражений 
может включать логические операции (И «and», ИЛИ «or», НЕ «not») и круглые скобки, изменяющие приоритеты выполнения операций.

Приоритеты операций:

круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND (данная операция "складывает" выходные значения, т.е. "где X и Y или X + Y = N"
OR

Задание
Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
*/

SELECT title, author, price, amount
FROM book
WHERE (price < 500 OR price > 600)
	AND amount * price >= 5000;

/*Выборка данных, операторы BETWEEN, IN

Логическое выражение после ключевого слова WHERE может включать операторы  BETWEEN и IN. 
Приоритет  у этих операторов такой же как у операторов сравнения, то есть они выполняются раньше, чем NOT, AND, OR.

Оператор BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы.
Оператор  IN  позволяет выбрать данные, соответствующие значениям из списка.

Задание:
Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы), а количество или 2, или 3, или 5, или 7 .
*/

SELECT title, author
FROM book
WHERE (price BETWEEN 540.50 AND 800) 
	AND amount IN (2, 3, 5, 7); /*Не забывайте ставить скобки у оператора BETWEEN!*/

/*
Выборка данных с сортировкой
При выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строки. 
Для этого используются ключевые слова ORDER BY, после которых задаются имена столбцов. 
При этом строки сортируются по первому столбцу, если указан второй столбец, 
сортировка осуществляется только для тех строк, у которых значения первого столбца одинаковы. 
По умолчанию ORDER BY выполняет сортировку по возрастанию. 
Чтобы управлять направлением сортировки вручную, после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию). 

Логический порядок операций для запроса SQL следующий:

FROM
WHERE
SELECT
ORDER BY

Поскольку сортировка выполняется позже SELECT, для указания столбцов, по которым выполняется сортировка, 
можно использовать имена, присвоенные им после SELECT, а также порядковый номер столбца в перечислении.

Задание:
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). 
Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
*/

SELECT author, title
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title ASC;

/*
Оператор LIKE используется для сравнения строк.
В отличие от операторов отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном.
Шаблон может включать обычные символы и символы-шаблоны.
При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке.
Символы-шаблоны могут совпадать с произвольными элементами символьной строки.

% — Любая строка, содержащая ноль или более символов	
SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»

_ (подчеркивание) — Любой одиночный символ	
SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

Задание:
Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». 
Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, 
между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. 
Информацию отсортировать по названию книги в алфавитном порядке.
*/

SELECT
    title,
    author
FROM
    book
WHERE
    title LIKE '%_ _%'
    AND
    author LIKE '%с.%'
ORDER BY title;

/*
Придумайте один или несколько запросов к нашей таблице book. Проверьте, правильно ли они работают.

При желании можно формулировку запросов  разместить в комментариях.
*/

SELECT
    author AS "Автор",
    title AS "Название",
    price AS "Стоимость, руб",
ROUND (price/64,1) AS "Стоимость, usd"
/*курс доллара на 16.05.2022г.*/
FROM book;


SELECT
    author AS Автор,
    title AS Название,
    price AS Стоимость_руб,
    ROUND (IF ((price*1.12)/64)>10, IF (price<10), 0) AS Стоимость_usd
/*курс доллара на 16.05.2022г.*/
FROM book
ORDER BY Стоимость_usd;