/* SQL 1.5 Запросы корректировки данных */

/*
Создание пустой таблицы
Создание таблицы осуществляется с помощью запроса CREATE, подробно рассмотренного в первом уроке модуля.

Задание
Создать таблицу поставка (supply), которая имеет ту же структуру, что и таблиц book.

Поле	Тип, описание
supply_id	INT PRIMARY KEY AUTO_INCREMENT
title	VARCHAR(50)
author	VARCHAR(30)
price	DECIMAL(8, 2)
amount	INT
*/

CREATE TABLE supply (
    supply_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8,2),
    amount INT
);

/*
Добавление записей в таблицу
Добавление одной записи в таблицу осуществляется с помощью запроса INSERT, подробно рассмотренного в первом уроке. 
Запросы обязательно разделять точкой с запятой.

Задание
Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица:
*/

INSERT INTO supply (title, author, price, amount)
VALUES ('Лирика', 'Пастернак Б.Л.',	518.99,	2),
	('Черный человек', 	'Есенин С.А.',	570.20,	6),
	('Белая гвардия',	'Булгаков М.А.',	540.50,	7),
	('Идиот',	'Достоевский Ф.М.',	360.80,	3);
	
/*
Добавление записей из другой таблицы
С помощью запроса на добавление можно не только добавить в таблицу конкретные значения (список VALUES), 
но и записи из другой таблицы, отобранные с помощью запроса на выборку.  
В этом случае вместо раздела VALUES записывается запрос на выборку, начинающийся с SELECT.  
В нем можно использовать WHERE, GROUP BY, ORDER BY.

Правила соответствия между полями таблицы и вставляемыми значениями из запроса:

1) количество полей в таблице и количество полей в запросе должны совпадать;
2) должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, 
поэтому первый столбец запроса должен относиться к первому столбцу в списке столбцов таблицы, второй – ко второму столбцу и т.д.
3) типы столбцов запроса должны быть совместимы с типами данных соответствующих столбцов таблицы 
( целое число можно занести в поле типа DECIMAL, обратная операция – недопустима).

Задание
Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
*/

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN ('Булгаков М.А.', 'Достоевский Ф.М.');

SELECT *
FROM book;

/*
Добавление записей, вложенные запросы
В запросах на добавление можно использовать вложенные запросы.

Пример

Занести из таблицы supply в таблицу book только те книги, названия которых отсутствуют в таблице book.

Запрос:
*/

INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE title NOT IN (
        SELECT title 
        FROM book
      );
SELECT * FROM book;

/*
Задание
Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.
*/

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN (SELECT author
                     FROM book
					 );
SELECT *
FROM book;

/*
Запросы на обновление
Под обновлением данных подразумевается изменение значений в существующих записях таблицы. 
При этом возможно как изменение значений полей в группе строк (даже всех строк таблицы), так и правка значения поля отдельной строки.

Изменение записей в таблице реализуется с помощью запроса UPDATE. Простейший запрос на  обновление выглядит так:

UPDATE таблица SET поле = выражение

где:
таблица – имя таблицы, в которой будут проводиться изменения;
поле – поле таблицы, в которое будет внесено изменение;
выражение – выражение,  значение которого будет занесено в поле.

Пример

Уменьшить на 30% цену книг в таблице book.

Запрос:
*/
UPDATE book 
SET price = 0.7 * price;

SELECT * FROM book;
/*
С помощью запросов на обновление можно изменять не все записи в таблице (как в предыдущем запросе), а только часть из них. 
Для этого в запрос включается ключевое слово WHERE, после которого указывается условие отбора строк для изменения.
Пример

Уменьшить на 30% цену тех книг в таблице book, количество которых меньше 5.

Запрос:
*/
UPDATE book 
SET price = 0.7 * price 
WHERE amount < 5;

SELECT * FROM book;

/*
Задание
Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
*/

UPDATE book
SET price = 0.9 * price
WHERE amount BETWEEN 5 AND 10;

SELECT *
FROM book;

/*
Запросы на обновление нескольких столбцов
Запросом UPDATE можно обновлять значения нескольких столбцов одновременно. В этом случае простейший запрос будет выглядеть так:

UPDATE таблица SET поле1 = выражение1, поле2 = выражение2

Пример

В столбце buy покупатель указывает количество книг, которые он хочет приобрести. 
Для каждой книги, выбранной покупателем, необходимо уменьшить ее количество на складе 
на указанное в столбце buy количество, а в столбец buy занести 0.

Запрос:
*/
UPDATE book 
SET amount = amount - buy,
    buy = 0;

SELECT * FROM book;
/*
Задание
В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, 
чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. 
А цену тех книг, которые покупатель не заказывал, снизить на 10%.
*/

UPDATE book
SET buy = IF(buy > amount, amount, buy), 
	price = IF(buy = 0, price * 0.9, price)
;
SELECT * FROM book;

/*
Запросы на обновление нескольких таблиц 
В запросах на обновление можно использовать несколько таблиц, но тогда

для столбцов, имеющих одинаковые имена, необходимо указывать имя таблицы, к которой они относятся, 
например, book.price – столбец price из таблицы book, supply.price – столбец price из таблицы supply;
все таблицы, используемые в запросе, нужно перечислить после ключевого слова UPDATE;
в запросе обязательно условие WHERE, в котором указывается условие при котором обновляются данные.
Пример

Если в таблице supply  есть те же книги, что и в таблице book, добавлять эти книги в таблицу book не имеет смысла. 
Необходимо увеличить их количество на значение столбца amountтаблицы supply.

Запрос:
*/
UPDATE book, supply 
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;
/*
Задание
Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book 
( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену 
(для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
*/

UPDATE book, supply
SET book.amount = book.amount + supply.amount, 
	book.price = (book.price + supply.price)/2
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;

/*
Запросы на удаление
Запросы корректировки данных позволяют удалить одну или несколько записей из  таблицы. Простейший запрос на удаление имеет вид:
*/
DELETE FROM таблица; 
/*
Этот запрос удаляет все записи из указанной после FROM таблицы.

Пример

После того, как информация о книгах из таблицы supply перенесена в book , необходимо очистить таблицу  supply.

Запрос:
*/
DELETE FROM supply;

SELECT * FROM supply;
/*
Пример

Удалить из таблицы supply все книги, названия которых есть в таблице book.

Запрос:
*/
DELETE FROM supply 
WHERE title IN (
        SELECT title 
        FROM book
      );


SELECT * FROM supply;
/*
Задание
Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
*/

DELETE 
    FROM supply 
    WHERE author IN (
        SELECT author  
        FROM book 
        GROUP BY author 
        HAVING SUM(amount) > 10 
);
SELECT * FROM supply;

/*
Запросы на создание таблицы
Новая таблица может быть создана на основе данных из другой таблицы. 
Для этого используется запрос SELECT, результирующая таблица которого и будет новой таблицей базы данных. 
При этом имена столбцов запроса становятся именами столбцов новой таблицы. Запрос на создание новой таблицы имеет вид:
*/
CREATE TABLE имя_таблицы AS
SELECT ...
/*
Пример

Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше 4. 
Для всех книг указать одинаковое количество экземпляров 5.

Запрос:
*/
CREATE TABLE ordering AS
SELECT author, title, 5 AS amount
FROM book
WHERE amount < 4;

SELECT * FROM ordering;
/*
При создании таблицы можно использовать вложенные запросы как после SELECT, так и после WHERE.

Пример

Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше 4. 
Для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.

Запрос:
*/
CREATE TABLE ordering AS
SELECT author, title, 
   (
    SELECT ROUND(AVG(amount)) 
    FROM book
   ) AS amount
FROM book
WHERE amount < 4;

SELECT * FROM ordering;
/*
Задание
Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, 
количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. 
В таблицу включить столбец amount, в котором для всех книг указать одинаковое значение - среднее количество 
экземпляров книг в таблице book.
*/
CREATE TABLE ordering AS
SELECT author, title,
    (SELECT ROUND(AVG(amount))
    FROM book) AS amount
FROM book
WHERE amount < (SELECT AVG(amount)
                FROM book);

SELECT *
FROM ordering;

ИЛИ

CREATE TABLE ordering AS
SELECT author, title, 
     (SELECT FLOOR(AVG(amount)) 
      FROM book) as amount
FROM book
WHERE amount < (SELECT AVG(amount) 
                FROM book);
SELECT *
FROM ordering; /*Этот вариант корректнее, т.к. возвращает минимальное из округлённого числа. Чтобы не было, что 6 < 6.49, а было 6 = 6*/

/*
Делаем скидку 5% на самое большое количество экземпляров книг
*/

UPDATE book
    SET book.price = book.price * 0.95
WHERE book.amount = (SELECT MAX(book2.amount)
                      FROM (SELECT * 
                           FROM book) 
                      AS book2);
                
SELECT * FROM book;

/*
Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество которых в таблице book меньше максимального (15). 
Для всех книг в таблице ordering указать такое значение, которое позволит выровнять количество книг до максимального в таблице book.
*/

CREATE TABLE ordering AS
SELECT author, title, (SELECT MAX(amount) FROM book) - amount
                       AS amount
FROM book
WHERE amount < (SELECT MAX(amount) FROM book);

SELECT * FROM ordering;
