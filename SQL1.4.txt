/* SQL 1.4 Вложенные запросы */
/*
Содержание урока
SQL позволяет создавать вложенные запросы. Вложенный запрос (подзапрос, внутренний запрос) – это запрос внутри другого запроса SQL.

Вложенный запрос используется для выборки данных, которые будут использоваться в условии отбора записей основного запроса. 
Его применяют для:

сравнения выражения с результатом вложенного запроса;
определения того, включено ли выражение в результаты вложенного запроса;
проверки того, выбирает ли запрос определенные строки.
Вложенный запрос имеет следующие компоненты:

ключевое слово SELECT  после которого указываются имена столбцов или выражения (чаще всего список содержит один элемент) ;
ключевое слово FROM и имя таблицы, из которой выбираются данные;
необязательное предложение WHERE;
необязательное предложение GROUP BY:
необязательное предложение HAVING.
Вложенные запросы  могут включаться в WHERE или HAVING так 
(в квадратных скобках указаны необязательные элементы, через | – один из элементов):

WHERE | HAVING выражение оператор_сравнения (вложенный запрос);
WHERE | HAVING выражение, включающее вложенный запрос;
WHERE | HAVING выражение [NOT] IN (вложенный запрос);
WHERE | HAVING выражение  оператор_сравнения  ANY | ALL (вложенный запрос).
Также вложенные запросы могут вставляться в основной запрос после ключевого слова SELECT.
*/

/*
Вложенный запрос, возвращающий одно значение
Вложенный запрос, возвращающий одно значение, может использоваться в условии отбора записей WHERE 
как обычное значение совместно с операциями =, <>, >=, <=, >, <.

Задание:
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. 
Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
*/

SELECT author, title, price
FROM book
WHERE price <= (
         SELECT AVG(price) 
         FROM book)
ORDER BY price DESC;

/*
Использование вложенного запроса в выражении
Вложенный запрос, возвращающий одно значение, может использоваться в выражениях как обычный операнд, 
например, к нему можно что-то прибавить, вычесть и пр.

Задание:
Вывести информацию (автора, название и цену) о тех книгах, цены которых 
превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.
*/

SELECT author, title, price
FROM book
WHERE (price <= 150 + (SELECT MIN(price) FROM book))
ORDER BY price ASC;

/*
Вложенный запрос, оператор IN
Вложенный запрос может возвращать несколько значений одного столбца.  
Оператор IN определяет, совпадает ли указанное в логическом выражении значение с одним из значений, 
содержащихся во вложенном запросе ,  при этом логическое выражение получает значение истина.
Оператор NOT IN выполняет обратное действие – выражение истинно, если значение не содержится во вложенном запросе.

Задание:
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
*/

SELECT author, title, amount
FROM book
WHERE amount IN (
    SELECT amount
    FROM book
    GROUP BY amount
    HAVING COUNT(amount) = 1);
	
/*
Вложенный запрос, операторы ANY и ALL
 Вложенный запрос, возвращающий несколько значений одного столбца, можно использовать для отбора записей с помощью 
 операторов ANY и ALL совместно с операциями отношения (=, <>, <=, >=, <, >).

Операторы ANY и ALL используются  в SQL для сравнения некоторого значения с результирующим набором вложенного запроса, 
состоящим из одного столбца. При этом тип данных столбца, возвращаемого вложенным запросом, должен совпадать с типом данных столбца 
(или выражения), с которым происходит сравнение.

При использовании оператора ANY в результирующую таблицу будут включены все записи, для которых  выражение со знаком отношения 
верно хотя бы для одного элемента результирующего запроса. Как работает оператор ANY():

amount > ANY (10, 12) эквивалентно amount > 10

amount < ANY (10, 12) эквивалентно amount < 12

amount = ANY (10, 12) эквивалентно (amount = 10) OR (amount = 12), а также amount IN  (10,12)

amount <> ANY (10, 12) вернет все записи с любым значением amount, включая 10 и 12

При использовании оператора ALL в результирующую таблицу будут включены все записи, для которых  выражение со знаком отношения 
верно для всех элементов результирующего запроса. Как работает оператор ALL:

amount > ALL (10, 12) эквивалентно amount > 12

amount < ALL (10, 12) эквивалентно amount < 10

amount = ALL (10, 12) не вернет ни одной записи, так как эквивалентно (amount = 10) AND (amount = 12)
amount <> ALL (10, 12) вернет все записи кроме тех,  в которыхamount равно 10 или 12

Важно! Операторы ALL и ANY можно использовать только с вложенными запросами. В примерах выше (10, 12) 
приводится как результат вложенного запроса просто для того, чтобы показать как эти операторы работают. В запросах так записывать нельзя.

Задание
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
*/

SELECT author, title, price
FROM book
WHERE price < ANY (
        SELECT MIN(price)
        FROM book
        GROUP BY author);

/*
Вложенный запрос после SELECT
Вложенный запрос может располагаться после ключевого слова SELECT. 
В этом случае результат выполнения запроса выводится в отдельном столбце результирующей таблицы. 
При этом результатом запроса может быть только одно значение, тогда оно будет повторяться во всех строках. 
Также вложенный запрос может использоваться в выражениях.

Задание
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, 
чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению 
самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, 
текущее количество экземпляров на складе и количество заказываемых экземпляров книг. 
Последнему столбцу присвоить имя Заказ. В результат не включать книги, которые заказывать не нужно.
*/

SELECT title, author, amount,
    (SELECT ABS(amount - (SELECT MAX(amount) FROM book))) AS Заказ /*тут выбираем четыре столбца, где один вычисляется*/
FROM book
WHERE amount < (SELECT MAX(amount) FROM book);

/*
Какая книга принесет больше всего выручки, в процентах.
*/

SELECT *, 
    ROUND(((100 * price * amount) / (SELECT SUM(price*amount) FROM book)), 2) AS income_percent
FROM book
ORDER BY income_percent DESC;
